// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: m304.sql

package mysqlc

import (
	"context"
	"database/sql"
)

const getM304FromUecsDevice = `-- name: GetM304FromUecsDevice :many
SELECT id, uecs_id, mac_addr, dhcp_flg, ip_addr, net_mask, defgw, dns, vender_name, node_name, rly_0, rly_1, rly_2, rly_3, rly_4, rly_5, rly_6, rly_7
FROM m304
WHERE ` + "`" + `rly_0` + "`" + ` = ?
OR ` + "`" + `rly_1` + "`" + ` = ?
OR ` + "`" + `rly_2` + "`" + ` = ?
OR ` + "`" + `rly_3` + "`" + ` = ?
OR ` + "`" + `rly_4` + "`" + ` = ?
OR ` + "`" + `rly_5` + "`" + ` = ?
OR ` + "`" + `rly_6` + "`" + ` = ?
OR ` + "`" + `rly_7` + "`" + ` = ?
`

type GetM304FromUecsDeviceParams struct {
	Rly0 sql.NullInt32
	Rly1 sql.NullInt32
	Rly2 sql.NullInt32
	Rly3 sql.NullInt32
	Rly4 sql.NullInt32
	Rly5 sql.NullInt32
	Rly6 sql.NullInt32
	Rly7 sql.NullInt32
}

type GetM304FromUecsDeviceRow struct {
	ID         int32
	UecsID     sql.NullString
	MacAddr    sql.NullString
	DhcpFlg    sql.NullBool
	IpAddr     sql.NullString
	NetMask    sql.NullString
	Defgw      sql.NullString
	Dns        sql.NullString
	VenderName sql.NullString
	NodeName   sql.NullString
	Rly0       sql.NullInt32
	Rly1       sql.NullInt32
	Rly2       sql.NullInt32
	Rly3       sql.NullInt32
	Rly4       sql.NullInt32
	Rly5       sql.NullInt32
	Rly6       sql.NullInt32
	Rly7       sql.NullInt32
}

func (q *Queries) GetM304FromUecsDevice(ctx context.Context, arg GetM304FromUecsDeviceParams) ([]GetM304FromUecsDeviceRow, error) {
	rows, err := q.db.QueryContext(ctx, getM304FromUecsDevice,
		arg.Rly0,
		arg.Rly1,
		arg.Rly2,
		arg.Rly3,
		arg.Rly4,
		arg.Rly5,
		arg.Rly6,
		arg.Rly7,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetM304FromUecsDeviceRow
	for rows.Next() {
		var i GetM304FromUecsDeviceRow
		if err := rows.Scan(
			&i.ID,
			&i.UecsID,
			&i.MacAddr,
			&i.DhcpFlg,
			&i.IpAddr,
			&i.NetMask,
			&i.Defgw,
			&i.Dns,
			&i.VenderName,
			&i.NodeName,
			&i.Rly0,
			&i.Rly1,
			&i.Rly2,
			&i.Rly3,
			&i.Rly4,
			&i.Rly5,
			&i.Rly6,
			&i.Rly7,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
