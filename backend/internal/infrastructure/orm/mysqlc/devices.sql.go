// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package mysqlc

import (
	"context"
	"database/sql"
	"time"
)

const createDevice = `-- name: CreateDevice :execlastid
INSERT INTO devices (house_id, climate_data_id, duration) 
VALUES (?, ?, ?)
`

type CreateDeviceParams struct {
	HouseID       int32
	ClimateDataID int32
	Duration      sql.NullInt32
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createDevice, arg.HouseID, arg.ClimateDataID, arg.Duration)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getDevicesFromHouse = `-- name: GetDevicesFromHouse :many
SELECT 
    d.id, d.house_id, d.duration, d.created_at, d.updated_at,
    c.name, c.unit
FROM devices d
JOIN climate_datas c ON d.climate_data_id = c.id
WHERE d.house_id = ?
`

type GetDevicesFromHouseRow struct {
	ID        int32
	HouseID   int32
	Duration  sql.NullInt32
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Unit      string
}

func (q *Queries) GetDevicesFromHouse(ctx context.Context, houseID int32) ([]GetDevicesFromHouseRow, error) {
	rows, err := q.db.QueryContext(ctx, getDevicesFromHouse, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesFromHouseRow
	for rows.Next() {
		var i GetDevicesFromHouseRow
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.Duration,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Unit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
