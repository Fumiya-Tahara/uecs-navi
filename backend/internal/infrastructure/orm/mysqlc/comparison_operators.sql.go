// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comparison_operators.sql

package mysqlc

import (
	"context"
)

const getAllComparisonOperators = `-- name: GetAllComparisonOperators :many
SELECT id, comparison_operator
FROM comparison_operators
`

type GetAllComparisonOperatorsRow struct {
	ID                 int32
	ComparisonOperator string
}

func (q *Queries) GetAllComparisonOperators(ctx context.Context) ([]GetAllComparisonOperatorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllComparisonOperators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllComparisonOperatorsRow
	for rows.Next() {
		var i GetAllComparisonOperatorsRow
		if err := rows.Scan(&i.ID, &i.ComparisonOperator); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComparisonOperatorFromID = `-- name: GetComparisonOperatorFromID :one
SELECT id, comparison_operator
FROM comparison_operators
WHERE id = ?
`

type GetComparisonOperatorFromIDRow struct {
	ID                 int32
	ComparisonOperator string
}

func (q *Queries) GetComparisonOperatorFromID(ctx context.Context, id int32) (GetComparisonOperatorFromIDRow, error) {
	row := q.db.QueryRowContext(ctx, getComparisonOperatorFromID, id)
	var i GetComparisonOperatorFromIDRow
	err := row.Scan(&i.ID, &i.ComparisonOperator)
	return i, err
}
