// Code generated by MockGen. DO NOT EDIT.
// Source: ../../interfaces/repository_interfaces.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/Fumiya-Tahara/uecs-navi.git/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockClimateDataRepositoryInterface is a mock of ClimateDataRepositoryInterface interface.
type MockClimateDataRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClimateDataRepositoryInterfaceMockRecorder
}

// MockClimateDataRepositoryInterfaceMockRecorder is the mock recorder for MockClimateDataRepositoryInterface.
type MockClimateDataRepositoryInterfaceMockRecorder struct {
	mock *MockClimateDataRepositoryInterface
}

// NewMockClimateDataRepositoryInterface creates a new mock instance.
func NewMockClimateDataRepositoryInterface(ctrl *gomock.Controller) *MockClimateDataRepositoryInterface {
	mock := &MockClimateDataRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockClimateDataRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClimateDataRepositoryInterface) EXPECT() *MockClimateDataRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAllClimateData mocks base method.
func (m *MockClimateDataRepositoryInterface) GetAllClimateData() (*[]domain.ClimateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClimateData")
	ret0, _ := ret[0].(*[]domain.ClimateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClimateData indicates an expected call of GetAllClimateData.
func (mr *MockClimateDataRepositoryInterfaceMockRecorder) GetAllClimateData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClimateData", reflect.TypeOf((*MockClimateDataRepositoryInterface)(nil).GetAllClimateData))
}

// GetClimateDataFromID mocks base method.
func (m *MockClimateDataRepositoryInterface) GetClimateDataFromID(ID int) (*domain.ClimateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClimateDataFromID", ID)
	ret0, _ := ret[0].(*domain.ClimateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClimateDataFromID indicates an expected call of GetClimateDataFromID.
func (mr *MockClimateDataRepositoryInterfaceMockRecorder) GetClimateDataFromID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClimateDataFromID", reflect.TypeOf((*MockClimateDataRepositoryInterface)(nil).GetClimateDataFromID), ID)
}

// MockComparisonOperatorRepositoryInterface is a mock of ComparisonOperatorRepositoryInterface interface.
type MockComparisonOperatorRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComparisonOperatorRepositoryInterfaceMockRecorder
}

// MockComparisonOperatorRepositoryInterfaceMockRecorder is the mock recorder for MockComparisonOperatorRepositoryInterface.
type MockComparisonOperatorRepositoryInterfaceMockRecorder struct {
	mock *MockComparisonOperatorRepositoryInterface
}

// NewMockComparisonOperatorRepositoryInterface creates a new mock instance.
func NewMockComparisonOperatorRepositoryInterface(ctrl *gomock.Controller) *MockComparisonOperatorRepositoryInterface {
	mock := &MockComparisonOperatorRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockComparisonOperatorRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComparisonOperatorRepositoryInterface) EXPECT() *MockComparisonOperatorRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAllComparisonOperatorFromID mocks base method.
func (m *MockComparisonOperatorRepositoryInterface) GetAllComparisonOperatorFromID(ID int) *domain.ComparisonOperator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComparisonOperatorFromID", ID)
	ret0, _ := ret[0].(*domain.ComparisonOperator)
	return ret0
}

// GetAllComparisonOperatorFromID indicates an expected call of GetAllComparisonOperatorFromID.
func (mr *MockComparisonOperatorRepositoryInterfaceMockRecorder) GetAllComparisonOperatorFromID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComparisonOperatorFromID", reflect.TypeOf((*MockComparisonOperatorRepositoryInterface)(nil).GetAllComparisonOperatorFromID), ID)
}

// GetAllComparisonOperators mocks base method.
func (m *MockComparisonOperatorRepositoryInterface) GetAllComparisonOperators() (*[]domain.ComparisonOperator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComparisonOperators")
	ret0, _ := ret[0].(*[]domain.ComparisonOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllComparisonOperators indicates an expected call of GetAllComparisonOperators.
func (mr *MockComparisonOperatorRepositoryInterfaceMockRecorder) GetAllComparisonOperators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComparisonOperators", reflect.TypeOf((*MockComparisonOperatorRepositoryInterface)(nil).GetAllComparisonOperators))
}

// MockConditionRepositoryInterface is a mock of ConditionRepositoryInterface interface.
type MockConditionRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConditionRepositoryInterfaceMockRecorder
}

// MockConditionRepositoryInterfaceMockRecorder is the mock recorder for MockConditionRepositoryInterface.
type MockConditionRepositoryInterfaceMockRecorder struct {
	mock *MockConditionRepositoryInterface
}

// NewMockConditionRepositoryInterface creates a new mock instance.
func NewMockConditionRepositoryInterface(ctrl *gomock.Controller) *MockConditionRepositoryInterface {
	mock := &MockConditionRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockConditionRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionRepositoryInterface) EXPECT() *MockConditionRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCondition mocks base method.
func (m *MockConditionRepositoryInterface) CreateCondition(newCondition *domain.Condition) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCondition", newCondition)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCondition indicates an expected call of CreateCondition.
func (mr *MockConditionRepositoryInterfaceMockRecorder) CreateCondition(newCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCondition", reflect.TypeOf((*MockConditionRepositoryInterface)(nil).CreateCondition), newCondition)
}

// GetConditionFromTimeScheduleRow mocks base method.
func (m *MockConditionRepositoryInterface) GetConditionFromTimeScheduleRow(timeScheduleRowID int) (*domain.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConditionFromTimeScheduleRow", timeScheduleRowID)
	ret0, _ := ret[0].(*domain.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConditionFromTimeScheduleRow indicates an expected call of GetConditionFromTimeScheduleRow.
func (mr *MockConditionRepositoryInterfaceMockRecorder) GetConditionFromTimeScheduleRow(timeScheduleRowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditionFromTimeScheduleRow", reflect.TypeOf((*MockConditionRepositoryInterface)(nil).GetConditionFromTimeScheduleRow), timeScheduleRowID)
}

// UpdateCondition mocks base method.
func (m *MockConditionRepositoryInterface) UpdateCondition(condition domain.Condition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCondition", condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCondition indicates an expected call of UpdateCondition.
func (mr *MockConditionRepositoryInterfaceMockRecorder) UpdateCondition(condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCondition", reflect.TypeOf((*MockConditionRepositoryInterface)(nil).UpdateCondition), condition)
}

// MockDeviceRepositoryInterface is a mock of DeviceRepositoryInterface interface.
type MockDeviceRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryInterfaceMockRecorder
}

// MockDeviceRepositoryInterfaceMockRecorder is the mock recorder for MockDeviceRepositoryInterface.
type MockDeviceRepositoryInterfaceMockRecorder struct {
	mock *MockDeviceRepositoryInterface
}

// NewMockDeviceRepositoryInterface creates a new mock instance.
func NewMockDeviceRepositoryInterface(ctrl *gomock.Controller) *MockDeviceRepositoryInterface {
	mock := &MockDeviceRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepositoryInterface) EXPECT() *MockDeviceRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDeviceRepositoryInterface) CreateDevice(newDevice domain.Device) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", newDevice)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceRepositoryInterfaceMockRecorder) CreateDevice(newDevice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceRepositoryInterface)(nil).CreateDevice), newDevice)
}

// GetDevicesFromM304 mocks base method.
func (m *MockDeviceRepositoryInterface) GetDevicesFromM304(m304ID int) (*[]domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesFromM304", m304ID)
	ret0, _ := ret[0].(*[]domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesFromM304 indicates an expected call of GetDevicesFromM304.
func (mr *MockDeviceRepositoryInterfaceMockRecorder) GetDevicesFromM304(m304ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesFromM304", reflect.TypeOf((*MockDeviceRepositoryInterface)(nil).GetDevicesFromM304), m304ID)
}

// MockEdgeRepositoryInterface is a mock of EdgeRepositoryInterface interface.
type MockEdgeRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEdgeRepositoryInterfaceMockRecorder
}

// MockEdgeRepositoryInterfaceMockRecorder is the mock recorder for MockEdgeRepositoryInterface.
type MockEdgeRepositoryInterfaceMockRecorder struct {
	mock *MockEdgeRepositoryInterface
}

// NewMockEdgeRepositoryInterface creates a new mock instance.
func NewMockEdgeRepositoryInterface(ctrl *gomock.Controller) *MockEdgeRepositoryInterface {
	mock := &MockEdgeRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEdgeRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEdgeRepositoryInterface) EXPECT() *MockEdgeRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateEdge mocks base method.
func (m *MockEdgeRepositoryInterface) CreateEdge(newEdge domain.Edge) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEdge", newEdge)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEdge indicates an expected call of CreateEdge.
func (mr *MockEdgeRepositoryInterfaceMockRecorder) CreateEdge(newEdge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEdge", reflect.TypeOf((*MockEdgeRepositoryInterface)(nil).CreateEdge), newEdge)
}

// GetEdgesFromWorkflow mocks base method.
func (m *MockEdgeRepositoryInterface) GetEdgesFromWorkflow(workflowID int) (*[]domain.Edge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEdgesFromWorkflow", workflowID)
	ret0, _ := ret[0].(*[]domain.Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEdgesFromWorkflow indicates an expected call of GetEdgesFromWorkflow.
func (mr *MockEdgeRepositoryInterfaceMockRecorder) GetEdgesFromWorkflow(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEdgesFromWorkflow", reflect.TypeOf((*MockEdgeRepositoryInterface)(nil).GetEdgesFromWorkflow), workflowID)
}

// UpdateEdge mocks base method.
func (m *MockEdgeRepositoryInterface) UpdateEdge(edge domain.Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEdge", edge)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEdge indicates an expected call of UpdateEdge.
func (mr *MockEdgeRepositoryInterfaceMockRecorder) UpdateEdge(edge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEdge", reflect.TypeOf((*MockEdgeRepositoryInterface)(nil).UpdateEdge), edge)
}

// MockHouseRepositoryInterface is a mock of HouseRepositoryInterface interface.
type MockHouseRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHouseRepositoryInterfaceMockRecorder
}

// MockHouseRepositoryInterfaceMockRecorder is the mock recorder for MockHouseRepositoryInterface.
type MockHouseRepositoryInterfaceMockRecorder struct {
	mock *MockHouseRepositoryInterface
}

// NewMockHouseRepositoryInterface creates a new mock instance.
func NewMockHouseRepositoryInterface(ctrl *gomock.Controller) *MockHouseRepositoryInterface {
	mock := &MockHouseRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockHouseRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseRepositoryInterface) EXPECT() *MockHouseRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateHouse mocks base method.
func (m *MockHouseRepositoryInterface) CreateHouse(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHouse", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHouse indicates an expected call of CreateHouse.
func (mr *MockHouseRepositoryInterfaceMockRecorder) CreateHouse(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHouse", reflect.TypeOf((*MockHouseRepositoryInterface)(nil).CreateHouse), name)
}

// GetAllHouses mocks base method.
func (m *MockHouseRepositoryInterface) GetAllHouses() (*[]domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHouses")
	ret0, _ := ret[0].(*[]domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHouses indicates an expected call of GetAllHouses.
func (mr *MockHouseRepositoryInterfaceMockRecorder) GetAllHouses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHouses", reflect.TypeOf((*MockHouseRepositoryInterface)(nil).GetAllHouses))
}

// MockM304RepositoryInterface is a mock of M304RepositoryInterface interface.
type MockM304RepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockM304RepositoryInterfaceMockRecorder
}

// MockM304RepositoryInterfaceMockRecorder is the mock recorder for MockM304RepositoryInterface.
type MockM304RepositoryInterfaceMockRecorder struct {
	mock *MockM304RepositoryInterface
}

// NewMockM304RepositoryInterface creates a new mock instance.
func NewMockM304RepositoryInterface(ctrl *gomock.Controller) *MockM304RepositoryInterface {
	mock := &MockM304RepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockM304RepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockM304RepositoryInterface) EXPECT() *MockM304RepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateM304 mocks base method.
func (m *MockM304RepositoryInterface) CreateM304(newM304 domain.M304) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateM304", newM304)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateM304 indicates an expected call of CreateM304.
func (mr *MockM304RepositoryInterfaceMockRecorder) CreateM304(newM304 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateM304", reflect.TypeOf((*MockM304RepositoryInterface)(nil).CreateM304), newM304)
}

// GetAllM304s mocks base method.
func (m *MockM304RepositoryInterface) GetAllM304s() (*[]domain.M304, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllM304s")
	ret0, _ := ret[0].(*[]domain.M304)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllM304s indicates an expected call of GetAllM304s.
func (mr *MockM304RepositoryInterfaceMockRecorder) GetAllM304s() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllM304s", reflect.TypeOf((*MockM304RepositoryInterface)(nil).GetAllM304s))
}

// GetM304FromID mocks base method.
func (m *MockM304RepositoryInterface) GetM304FromID(ID int) (*domain.M304, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetM304FromID", ID)
	ret0, _ := ret[0].(*domain.M304)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetM304FromID indicates an expected call of GetM304FromID.
func (mr *MockM304RepositoryInterfaceMockRecorder) GetM304FromID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetM304FromID", reflect.TypeOf((*MockM304RepositoryInterface)(nil).GetM304FromID), ID)
}

// MockNodeRepositoryInterface is a mock of NodeRepositoryInterface interface.
type MockNodeRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeRepositoryInterfaceMockRecorder
}

// MockNodeRepositoryInterfaceMockRecorder is the mock recorder for MockNodeRepositoryInterface.
type MockNodeRepositoryInterfaceMockRecorder struct {
	mock *MockNodeRepositoryInterface
}

// NewMockNodeRepositoryInterface creates a new mock instance.
func NewMockNodeRepositoryInterface(ctrl *gomock.Controller) *MockNodeRepositoryInterface {
	mock := &MockNodeRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockNodeRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeRepositoryInterface) EXPECT() *MockNodeRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateNode mocks base method.
func (m *MockNodeRepositoryInterface) CreateNode(newNode domain.Node) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", newNode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockNodeRepositoryInterfaceMockRecorder) CreateNode(newNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockNodeRepositoryInterface)(nil).CreateNode), newNode)
}

// GetNodesFromWorkflow mocks base method.
func (m *MockNodeRepositoryInterface) GetNodesFromWorkflow(workflowID int) (*[]domain.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesFromWorkflow", workflowID)
	ret0, _ := ret[0].(*[]domain.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesFromWorkflow indicates an expected call of GetNodesFromWorkflow.
func (mr *MockNodeRepositoryInterfaceMockRecorder) GetNodesFromWorkflow(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesFromWorkflow", reflect.TypeOf((*MockNodeRepositoryInterface)(nil).GetNodesFromWorkflow), workflowID)
}

// UpdateNode mocks base method.
func (m *MockNodeRepositoryInterface) UpdateNode(node domain.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockNodeRepositoryInterfaceMockRecorder) UpdateNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockNodeRepositoryInterface)(nil).UpdateNode), node)
}

// MockTimeScheduleRowRepositoryInterface is a mock of TimeScheduleRowRepositoryInterface interface.
type MockTimeScheduleRowRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTimeScheduleRowRepositoryInterfaceMockRecorder
}

// MockTimeScheduleRowRepositoryInterfaceMockRecorder is the mock recorder for MockTimeScheduleRowRepositoryInterface.
type MockTimeScheduleRowRepositoryInterfaceMockRecorder struct {
	mock *MockTimeScheduleRowRepositoryInterface
}

// NewMockTimeScheduleRowRepositoryInterface creates a new mock instance.
func NewMockTimeScheduleRowRepositoryInterface(ctrl *gomock.Controller) *MockTimeScheduleRowRepositoryInterface {
	mock := &MockTimeScheduleRowRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTimeScheduleRowRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeScheduleRowRepositoryInterface) EXPECT() *MockTimeScheduleRowRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateTimeScheduleRow mocks base method.
func (m *MockTimeScheduleRowRepositoryInterface) CreateTimeScheduleRow(newTimeScheduleRow domain.TimeScheduleRow) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeScheduleRow", newTimeScheduleRow)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimeScheduleRow indicates an expected call of CreateTimeScheduleRow.
func (mr *MockTimeScheduleRowRepositoryInterfaceMockRecorder) CreateTimeScheduleRow(newTimeScheduleRow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeScheduleRow", reflect.TypeOf((*MockTimeScheduleRowRepositoryInterface)(nil).CreateTimeScheduleRow), newTimeScheduleRow)
}

// GetTimeScheduleRowsFromTimeSchedule mocks base method.
func (m *MockTimeScheduleRowRepositoryInterface) GetTimeScheduleRowsFromTimeSchedule(timeScheduleID int) (*[]domain.TimeScheduleRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeScheduleRowsFromTimeSchedule", timeScheduleID)
	ret0, _ := ret[0].(*[]domain.TimeScheduleRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeScheduleRowsFromTimeSchedule indicates an expected call of GetTimeScheduleRowsFromTimeSchedule.
func (mr *MockTimeScheduleRowRepositoryInterfaceMockRecorder) GetTimeScheduleRowsFromTimeSchedule(timeScheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeScheduleRowsFromTimeSchedule", reflect.TypeOf((*MockTimeScheduleRowRepositoryInterface)(nil).GetTimeScheduleRowsFromTimeSchedule), timeScheduleID)
}

// UpdateTimeScheduleRow mocks base method.
func (m *MockTimeScheduleRowRepositoryInterface) UpdateTimeScheduleRow(timeScheduleRow domain.TimeScheduleRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeScheduleRow", timeScheduleRow)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeScheduleRow indicates an expected call of UpdateTimeScheduleRow.
func (mr *MockTimeScheduleRowRepositoryInterfaceMockRecorder) UpdateTimeScheduleRow(timeScheduleRow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeScheduleRow", reflect.TypeOf((*MockTimeScheduleRowRepositoryInterface)(nil).UpdateTimeScheduleRow), timeScheduleRow)
}

// MockTimeScheduleRepositoryInterface is a mock of TimeScheduleRepositoryInterface interface.
type MockTimeScheduleRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTimeScheduleRepositoryInterfaceMockRecorder
}

// MockTimeScheduleRepositoryInterfaceMockRecorder is the mock recorder for MockTimeScheduleRepositoryInterface.
type MockTimeScheduleRepositoryInterfaceMockRecorder struct {
	mock *MockTimeScheduleRepositoryInterface
}

// NewMockTimeScheduleRepositoryInterface creates a new mock instance.
func NewMockTimeScheduleRepositoryInterface(ctrl *gomock.Controller) *MockTimeScheduleRepositoryInterface {
	mock := &MockTimeScheduleRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTimeScheduleRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeScheduleRepositoryInterface) EXPECT() *MockTimeScheduleRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateTimeSchedule mocks base method.
func (m *MockTimeScheduleRepositoryInterface) CreateTimeSchedule(m304ID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeSchedule", m304ID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimeSchedule indicates an expected call of CreateTimeSchedule.
func (mr *MockTimeScheduleRepositoryInterfaceMockRecorder) CreateTimeSchedule(m304ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeSchedule", reflect.TypeOf((*MockTimeScheduleRepositoryInterface)(nil).CreateTimeSchedule), m304ID)
}

// GetTimeScheduleFromM304 mocks base method.
func (m *MockTimeScheduleRepositoryInterface) GetTimeScheduleFromM304(m304ID int) (*domain.TimeSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeScheduleFromM304", m304ID)
	ret0, _ := ret[0].(*domain.TimeSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeScheduleFromM304 indicates an expected call of GetTimeScheduleFromM304.
func (mr *MockTimeScheduleRepositoryInterfaceMockRecorder) GetTimeScheduleFromM304(m304ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeScheduleFromM304", reflect.TypeOf((*MockTimeScheduleRepositoryInterface)(nil).GetTimeScheduleFromM304), m304ID)
}

// UpdateTimeSchedule mocks base method.
func (m *MockTimeScheduleRepositoryInterface) UpdateTimeSchedule(timeSchedule domain.TimeSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeSchedule", timeSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeSchedule indicates an expected call of UpdateTimeSchedule.
func (mr *MockTimeScheduleRepositoryInterfaceMockRecorder) UpdateTimeSchedule(timeSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeSchedule", reflect.TypeOf((*MockTimeScheduleRepositoryInterface)(nil).UpdateTimeSchedule), timeSchedule)
}

// MockWorkflowOperationRepositoryInterface is a mock of WorkflowOperationRepositoryInterface interface.
type MockWorkflowOperationRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowOperationRepositoryInterfaceMockRecorder
}

// MockWorkflowOperationRepositoryInterfaceMockRecorder is the mock recorder for MockWorkflowOperationRepositoryInterface.
type MockWorkflowOperationRepositoryInterfaceMockRecorder struct {
	mock *MockWorkflowOperationRepositoryInterface
}

// NewMockWorkflowOperationRepositoryInterface creates a new mock instance.
func NewMockWorkflowOperationRepositoryInterface(ctrl *gomock.Controller) *MockWorkflowOperationRepositoryInterface {
	mock := &MockWorkflowOperationRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWorkflowOperationRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowOperationRepositoryInterface) EXPECT() *MockWorkflowOperationRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateWorkflowOperation mocks base method.
func (m *MockWorkflowOperationRepositoryInterface) CreateWorkflowOperation(newWorkflowOperation domain.WorkflowOperation) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowOperation", newWorkflowOperation)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowOperation indicates an expected call of CreateWorkflowOperation.
func (mr *MockWorkflowOperationRepositoryInterfaceMockRecorder) CreateWorkflowOperation(newWorkflowOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowOperation", reflect.TypeOf((*MockWorkflowOperationRepositoryInterface)(nil).CreateWorkflowOperation), newWorkflowOperation)
}

// GetWorkflowOperationsFromWorkflow mocks base method.
func (m *MockWorkflowOperationRepositoryInterface) GetWorkflowOperationsFromWorkflow(workflowID int) (*domain.WorkflowOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowOperationsFromWorkflow", workflowID)
	ret0, _ := ret[0].(*domain.WorkflowOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowOperationsFromWorkflow indicates an expected call of GetWorkflowOperationsFromWorkflow.
func (mr *MockWorkflowOperationRepositoryInterfaceMockRecorder) GetWorkflowOperationsFromWorkflow(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowOperationsFromWorkflow", reflect.TypeOf((*MockWorkflowOperationRepositoryInterface)(nil).GetWorkflowOperationsFromWorkflow), workflowID)
}

// UpdateWorkflowOperation mocks base method.
func (m *MockWorkflowOperationRepositoryInterface) UpdateWorkflowOperation(workflowOperation domain.WorkflowOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowOperation", workflowOperation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowOperation indicates an expected call of UpdateWorkflowOperation.
func (mr *MockWorkflowOperationRepositoryInterfaceMockRecorder) UpdateWorkflowOperation(workflowOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowOperation", reflect.TypeOf((*MockWorkflowOperationRepositoryInterface)(nil).UpdateWorkflowOperation), workflowOperation)
}

// MockWorkflowRepositoryInterface is a mock of WorkflowRepositoryInterface interface.
type MockWorkflowRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRepositoryInterfaceMockRecorder
}

// MockWorkflowRepositoryInterfaceMockRecorder is the mock recorder for MockWorkflowRepositoryInterface.
type MockWorkflowRepositoryInterfaceMockRecorder struct {
	mock *MockWorkflowRepositoryInterface
}

// NewMockWorkflowRepositoryInterface creates a new mock instance.
func NewMockWorkflowRepositoryInterface(ctrl *gomock.Controller) *MockWorkflowRepositoryInterface {
	mock := &MockWorkflowRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWorkflowRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowRepositoryInterface) EXPECT() *MockWorkflowRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateWorkflow mocks base method.
func (m *MockWorkflowRepositoryInterface) CreateWorkflow(newWorkflow domain.Workflow) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", newWorkflow)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockWorkflowRepositoryInterfaceMockRecorder) CreateWorkflow(newWorkflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockWorkflowRepositoryInterface)(nil).CreateWorkflow), newWorkflow)
}

// DeleteWorkflow mocks base method.
func (m *MockWorkflowRepositoryInterface) DeleteWorkflow(workflowID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", workflowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockWorkflowRepositoryInterfaceMockRecorder) DeleteWorkflow(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockWorkflowRepositoryInterface)(nil).DeleteWorkflow), workflowID)
}

// GetWorkflowsFromM304 mocks base method.
func (m *MockWorkflowRepositoryInterface) GetWorkflowsFromM304(m304ID int) (*[]domain.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowsFromM304", m304ID)
	ret0, _ := ret[0].(*[]domain.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowsFromM304 indicates an expected call of GetWorkflowsFromM304.
func (mr *MockWorkflowRepositoryInterfaceMockRecorder) GetWorkflowsFromM304(m304ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowsFromM304", reflect.TypeOf((*MockWorkflowRepositoryInterface)(nil).GetWorkflowsFromM304), m304ID)
}

// UpdateWorkflow mocks base method.
func (m *MockWorkflowRepositoryInterface) UpdateWorkflow(workflow domain.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockWorkflowRepositoryInterfaceMockRecorder) UpdateWorkflow(workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockWorkflowRepositoryInterface)(nil).UpdateWorkflow), workflow)
}
